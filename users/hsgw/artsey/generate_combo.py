import csv
import os

DEFAULT_COMBO_CSV = "users/hsgw/artsey/combos.csv"

OUTPUT_FILE_NAME = "combos.h"
OUTPUT_FILE = os.path.join(os.path.dirname(__file__), OUTPUT_FILE_NAME)

DEFAULT_PREFIX = "ar"

if __name__ == "__main__":
    layers = []
    base_keys = []
    combos = []
    combo_name_count = {}

    with open(DEFAULT_COMBO_CSV, "r") as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            layer, keycode, combo = row["layer"], row["keycode"], row["combo"]
            if not all([layer, keycode, combo]):
                print("skipping wrong row", row)
                continue

            combo = combo.split(" ")
            # remove leading and trailing space, remove null elements
            combo = list(filter(None, list(map(str.strip, combo))))

            layer = layer.strip()
            if layer not in layers:
                layers.append(layer)

            keycode = keycode.strip()

            if len(combo) == 1:
                base_keys.append({"layer": layer, "keycode": keycode, "pos": combo[0]})
            elif len(combo) >= 2:
                keycode_name = keycode.replace("(", "_").replace(")", "")
                combo_name = f"{DEFAULT_PREFIX}_{layer}_{keycode_name}".lower()
                count = combo_name_count.get(combo_name, 0)
                if count > 0:
                    combo_name = combo_name + f"_{count + 1}"
                    combo_name_count[combo_name] = count + 1
                else:
                    combo_name_count[combo_name] = 1

                combos.append(
                    {
                        "layer": layer,
                        "keycode": keycode,
                        "combo": combo,
                        "combo_name": combo_name,
                    }
                )
            else:
                print("skipping wrong row", row)
                continue

    if len(combos) == 0:
        print("no combos found")
        exit(1)

    with open(OUTPUT_FILE, "w") as output:
        output.write("// generated by generate_combo.py\n\n")
        output.write(
            '#pragma once\n\n#include QMK_KEYBOARD_H\n#include "combo_util.h"\n\n'
        )
        output.write("// layers\n")
        output.write("enum layers {\n")
        for layer in layers:
            output.write(f"  {DEFAULT_PREFIX}_{layer},\n".upper())
        output.write("};\n\n")

        output.write("// define base keys\n")
        for key in base_keys:
            output.write(f'#define {key["layer"]}_{key["pos"]} {key["keycode"]}\n')
        output.write("\n")

        output.write("// define combos\n")
        output.write("enum combo_events {\n")
        for combo in combos:
            output.write(f'  {combo["combo_name"]},\n'.upper())
        output.write("};\n\n")

        for combo in combos:
            output.write("const uint16_t PROGMEM ")
            output.write(f'{combo["combo_name"]}[] = {{')
            for pos in combo["combo"]:
                output.write(f'{combo["layer"]}_{pos},')
            output.write("COMBO_END};\n")
        output.write("\n")

        output.write("combo_t key_combos[] = {\n")
        for combo in combos:
            output.write(f'  [{combo["combo_name"].upper()}] = ')
            output.write(f'COMBO({combo["combo_name"]}, {combo["keycode"]}),\n')
        output.write("};\n\n")
